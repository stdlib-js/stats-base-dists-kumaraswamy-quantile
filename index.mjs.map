{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a probability `p`.\n*\n* @param {Probability} p - input probability\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = quantile( 0.5, 2.0, 4.0 );\n* // returns ~0.399\n*\n* @example\n* var y = quantile( 0.2, 2.0, 2.0 );\n* // returns ~0.325\n*\n* @example\n* var y = quantile( 0.8, 4.0, 4.0 );\n* // returns ~0.759\n*\n* @example\n* var y = quantile( -0.5, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.8, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.8, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, 1.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, a, b ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.5, 0.5 );\n*\n* var y = quantile( 0.8 );\n* // returns ~0.922\n*\n* y = quantile( 0.3 );\n* // returns ~0.26\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input probability\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-kumaraswamy-quantile';\n*\n* var y = quantile( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = quantile( 0.5, 2.0, 4.0 );\n* // returns ~0.399\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-quantile';\n*\n* var quantile = factory( 0.5, 0.5 );\n*\n* var y = quantile( 0.8 );\n* // returns ~0.922\n*\n* y = quantile( 0.3 );\n* // returns ~0.26\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["quantile","p","a","b","isnan","NaN","pow","factory","constantFunction","setReadOnly","main"],"mappings":";;4ZA4EA,SAASA,EAAUC,EAAGC,EAAGC,GACxB,OACCC,EAAOH,IACPG,EAAOF,IACPE,EAAOD,IACPD,GAAK,GACLC,GAAK,GACLF,EAAI,GACJA,EAAI,EAEGI,IAEDC,EAAK,EAAMA,EAAK,EAAIL,EAAG,EAAIE,GAAK,EAAID,EAC5C,CC5CA,SAASK,EAASL,EAAGC,GACpB,OACCC,EAAOF,IACPE,EAAOD,IACPD,GAAK,GACLC,GAAK,EAEEK,EAAkBH,KAe1B,SAAmBJ,GAClB,GAAKG,EAAOH,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOI,IAER,OAAOC,EAAK,EAAMA,EAAK,EAAIL,EAAG,EAAIE,GAAK,EAAID,EAC3C,CACF,CClBAO,EAAAC,EAAA,UAAAH"}